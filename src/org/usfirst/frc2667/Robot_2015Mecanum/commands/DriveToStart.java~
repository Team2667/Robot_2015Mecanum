// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2667.Robot_2015Mecanum.commands;

import org.usfirst.frc2667.Robot_2015Mecanum.Robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class  DriveToStart extends Command {
	private long startTime;
	private double delay;
	
	public DriveToStart() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		delay = 29;
		startTime = System.currentTimeMillis();
		Robot.drivetrain.driveStraight(0.7);
		if (Robot.drivetrain.getVoltage() > 3) {
			delay = 20; // TODO: If the switch is enabled change the duration
		}
		SmartDashboard.putNumber("inital voltage", Robot.drivetrain.getVoltage());
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		SmartDashboard.putNumber("voltage", Robot.drivetrain.getVoltage());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		long currentTime = System.currentTimeMillis(); 
		return (currentTime - startTime)/100 > delay;

	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drivetrain.stop();
		
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
